{
  "openapi": "3.0.2",
  "info": {
    "title": "Movie information API",
    "description": "This API provides access to publicly available data on a limited number of movies published from the year 1990 from the Internet Movie Database and other sources. The API endpoints and their usage are described in detail below.",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "Movies"
    },
    {
      "name": "People"
    },
    {
      "name": "Authentication"
    }
  ],
  "paths": {
    "/movies/search": {
      "get": {
        "tags": ["Movies"],
        "description": "Returns a list of movie data. The list is arranged by imdbId, in ascending order.",
        "operationId": "moviesSearch",
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "description": "Text to search for in the primary title of the movie.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The year of initial release of the movie",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of objects containing title, year, imdbID, imdbRating, rottenTomatoesRating, metacriticRating and classification properties. The results are limited to 100 per page. An example of one object in the array is shown below.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Movies"
                }
              }
            }
          },
          "400": {
            "description": "Invalid year query parameter. Click on 'Schema' below to see the possible error responses.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid year format. Format must be yyyy."
                    }
                  }
                }
              }
            }
          },
          "429":{
            "description": "Rate limit exceeded.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "example": "Too many requests, please try again later."
                }
              }
            }
          }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },

    "/movies/data/{imdbID}": {
      "get": {
        "tags": ["Movies"],
        "description": "Get data for a movie by imdbID",
        "operationId": "moviesData",
        "parameters": [
          {
            "name": "imdbID",
            "in": "path",
            "description": "The imdbID of the movie",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An object containing the data for the movie.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MovieData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters. Click on 'Schema' to see possible error responses.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "boolean",
                          "example": true
                        },
                        "message": {
                          "type": "string",
                          "example": "Invalid query parameters: year. Query parameters are not permitted."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "boolean",
                          "example": true
                        },
                        "message": {
                          "type": "string",
                          "example": "You must supply an imdbID!"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The requested movie could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "No record exists of a movie with this ID"
                    }
                  }
                }
              }
            }
          },
          "429":{
            "description": "Rate limit exceeded.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "example": "Too many requests, please try again later."
                }
              }
            }
          }
        }
      }
    },

    "/people/{id}": {
      "get": {
        "tags": ["People"],
        "description": "Get information about a person (actor, writer, director etc.) from their IMDB ID.",
        "operationId": "people",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The person's IMDB ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An object containing data about that person",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters. Click on 'Schema' to see possible error responses.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "boolean",
                          "example": true
                        },
                        "message": {
                          "type": "string",
                          "example": "Invalid query parameters: year. Query parameters are not permitted."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "boolean",
                          "example": true
                        },
                        "message": {
                          "type": "string",
                          "example": "You must supply an imdbID!"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Click on 'Schema' below to see the possible error responses.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MissingAuthHeader"
                    },
                    {
                      "$ref": "#/components/schemas/TokenExpired"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidJWT"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The requested person could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "No record exists of a person with this ID"
                    }
                  }
                }
              }
            }
          },
          "429":{
            "description": "Rate limit exceeded.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "example": "Too many requests, please try again later."
                }
              }
            }
          }
        }
      }
    },

    "/user": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/User" }
            },
            "application/xml": {
              "schema": { "$ref": "#/components/schemas/User" }
            },
            "application/x-www-form-urlencoded": {
              "schema": { "$ref": "#/components/schemas/User" }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              },
              "application/xml": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Movies": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": { "type": "string", "example": "Star Trek: First Contact" },
                "year": { "type": "integer", "example": 1996 },
                "imdbID": { "type": "string", "example": "tt0117731" },
                "imdbRating": { "type": "number", "format": "float", "example": 7.6 },
                "rottenTomatoesRating": { "type": "number", "example": 92 },
                "metacriticRating": { "type": "number", "example": 71 },
                "classification": { "type": "string", "example": "PG-13" }
              }
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "total": { "type": "number", "example": 6 },
              "lastPage": { "type": "number", "example": 1 },
              "perPage": { "type": "number", "example": 100 },
              "currentPage": { "type": "number", "example": 1 },
              "from": { "type": "number", "example": 1 },
              "to": { "type": "number", "example": 6 }
            }
          }
        }
      },
      "MovieData": {
        "type": "object",
        "properties": {
          "title": { "type": "string", "example": "Star Trek: First Contact" },
          "year": { "type": "integer", "example": 1996 },
          "runtime": { "type": "integer", "example": 111 },
          "genres": { "type": "array", "items": { "type": "string", "example": "Action" }, "example": ["Action", "Adventure", "Drama"] },
          "country": { "type": "string", "example": "United States" },
          "principals": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "required": true,
                  "example": "nm0001772"
                },
                "name": {
                  "type": "string",
                  "required": true,
                  "example": "Patrick Stewart"
                },
                "category": {
                  "type": "string",
                  "required": true,
                  "example": "actor"
                },
                "characters": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "Picard"
                  }
                }
              }
            },
            "example": [ 
              { 
                "id": "nm0005772", 
                "category": "cinematographer", 
                "name": "Matthew F. Leonetti", 
                "characters": [] 
              }, 
              { 
                "id": "nm0001772", 
                "category": "actor", 
                "name": "Patrick Stewart", 
                "characters": [ "Picard" ] 
              }, 
              { 
                "id": "nm0000408", 
                "category": "actor", 
                "name": "Jonathan Frakes", 
                "characters": [ "Riker" ] 
              }, 
              { 
                "id": "nm0000653", 
                "category": "actor", 
                "name": "Brent Spiner", 
                "characters": [ "Data" ] 
              }, 
              { 
                "id": "nm0000996", 
                "category": "actor", 
                "name": "LeVar Burton", 
                "characters": [ "Geordi" ] 
              }, 
              { 
                "id": "nm0734472", 
                "category": "writer", 
                "name": "Gene Roddenberry", 
                "characters": [] 
              }, 
              { 
                "id": "nm0075834", 
                "category": "writer", 
                "name": "Rick Berman", 
                "characters": [] 
              }, 
              { 
                "id": "nm0103804", 
                "category": "writer", 
                "name": "Brannon Braga", 
                "characters": [] 
              }, 
              { 
                "id": "nm0601822", 
                "category": "writer", 
                "name": "Ronald D. Moore", 
                "characters": [] 
              }, 
              { 
                "id": "nm0000025", 
                "category": "composer", 
                "name": "Jerry Goldsmith", 
                "characters": [] 
              } 
            ]
          },
          "ratings": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "source": { "type": "string", "example": "Internet Movie Database" },
                "value": { "type": "number", "example": "7.6" }
              }
            },
            "boxoffice": {
              "type": "integer",
              "example": 92027888
            },
            "poster": {
              "type": "string",
              "example": "https://m.media-amazon.com/images/M/MV5BYzMzZmE3MTItODYzYy00YWI5LWFkNWMtZTY5NmU2MDkxYWI1XkEyXkFqcGdeQXVyMjUzOTY1NTc@._V1_SX300.jpg"
            },
            "plot": {
              "type": "string",
              "example": "The Borg travel back in time intent on preventing Earth's first contact with an alien species. Captain Picard and his crew pursue them to ensure that Zefram Cochrane makes his maiden flight reaching warp speed."
            }
          }
        }
      },
      "MissingAuthHeader": {
        "type": "object",
        "properties": {
          "error": { "type": "boolean", "example": true },
          "message": { "type": "string", "example": "Authorization header ('Bearer token') not found" }
        }
      },
      "TokenExpired": {
        "type": "object",
        "properties": {
          "error": { "type": "boolean", "example": true },
          "message": { "type": "string", "example": "JWT token has expired" }
        }
      },
      "InvalidJWT": {
        "type": "object",
        "properties": {
          "error": { "type": "boolean", "example": true },
          "message": { "type": "string", "example": "Invalid JWT token" }
        }
      },
      "Person": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "Patrick Stewart" },
          "birthYear": { "type": "integer", "example": 1940 },
          "deathYear": { "type": "integer", "example": null },
          "roles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "movieName": { "type": "string", "example": "Star Trek: First Contact" },
                "movieId": { "type": "string", "example": "tt0117731" },
                "category": { "type": "string", "example": "actor" },
                "characters": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "Picard"
                  }
                },
                "imdbRating": { "type": "number", "example": 7.6 }
              }
            }
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 10 },
          "petId": { "type": "integer", "format": "int64", "example": 198772 },
          "quantity": { "type": "integer", "format": "int32", "example": 7 },
          "shipDate": { "type": "string", "format": "date-time" },
          "status": {
            "type": "string",
            "description": "Order Status",
            "example": "approved",
            "enum": ["placed", "approved", "delivered"]
          },
          "complete": { "type": "boolean" }
        },
        "xml": { "name": "order" }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 100000 },
          "username": { "type": "string", "example": "fehguy" },
          "address": {
            "type": "array",
            "xml": { "name": "addresses", "wrapped": true },
            "items": { "$ref": "#/components/schemas/Address" }
          }
        },
        "xml": { "name": "customer" }
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": { "type": "string", "example": "437 Lytton" },
          "city": { "type": "string", "example": "Palo Alto" },
          "state": { "type": "string", "example": "CA" },
          "zip": { "type": "string", "example": "94301" }
        },
        "xml": { "name": "address" }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 1 },
          "name": { "type": "string", "example": "Dogs" }
        },
        "xml": { "name": "category" }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 10 },
          "username": { "type": "string", "example": "theUser" },
          "firstName": { "type": "string", "example": "John" },
          "lastName": { "type": "string", "example": "James" },
          "email": { "type": "string", "example": "john@email.com" },
          "password": { "type": "string", "example": "12345" },
          "phone": { "type": "string", "example": "12345" },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32",
            "example": 1
          }
        },
        "xml": { "name": "user" }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "name": { "type": "string" }
        },
        "xml": { "name": "tag" }
      },
      "Pet": {
        "required": ["name", "photoUrls"],
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 10 },
          "name": { "type": "string", "example": "doggie" },
          "category": { "$ref": "#/components/schemas/Category" },
          "photoUrls": {
            "type": "array",
            "xml": { "wrapped": true },
            "items": { "type": "string", "xml": { "name": "photoUrl" } }
          },
          "tags": {
            "type": "array",
            "xml": { "wrapped": true },
            "items": { "$ref": "#/components/schemas/Tag" }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": ["available", "pending", "sold"]
          }
        },
        "xml": { "name": "pet" }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": { "type": "integer", "format": "int32" },
          "type": { "type": "string" },
          "message": { "type": "string" }
        },
        "xml": { "name": "##default" }
      }
    },
    "requestBodies": {
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/Pet" }
          },
          "application/xml": {
            "schema": { "$ref": "#/components/schemas/Pet" }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": { "$ref": "#/components/schemas/User" }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": { "type": "apiKey", "name": "api_key", "in": "header" }
    }
  }
}
